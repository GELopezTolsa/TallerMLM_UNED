#'
#' @return
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
dd_mbauc_greenmyerson <- function(fittingObject, id) {
currentData = fittingObject$data[
which(fittingObject$data[,
as.character(fittingObject$settings['Individual'])] == id),]
currentData$ddX = currentData[,as.character(fittingObject$settings['Delays'])]
maxX        = max(currentData$ddX)
minX        = min(currentData$ddX)
maximumArea = maxX - minX
lnk = fittingObject$results[[as.character(id)]][["greenmyerson"]][["Lnk"]]
s   = fittingObject$results[[as.character(id)]][["greenmyerson"]][["S"]]
fittingObject$mbauc[[as.character(id)]] = stats::integrate(integrandMyerson,
lower = minX,
upper = maxX,
lnK   = lnk,
s     = s)$value/maximumArea
fittingObject
}
#' dd_mbauc_log10_greenmyerson
#'
#' @param fittingObject core dd fitting object
#' @param id id tag
#'
#' @return
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
dd_mbauc_log10_greenmyerson <- function(fittingObject, id) {
currentData = fittingObject$data[
which(fittingObject$data[,
as.character(fittingObject$settings['Individual'])] == id),]
currentData$ddX = currentData[,as.character(fittingObject$settings['Delays'])]
maxX        = log10(max(currentData$ddX))
minX        = log10(min(currentData$ddX))
maximumArea = maxX - minX
lnk = fittingObject$results[[as.character(id)]][["greenmyerson"]][["Lnk"]]
s   = fittingObject$results[[as.character(id)]][["greenmyerson"]][["S"]]
fittingObject$mbauclog10[[as.character(id)]] = stats::integrate(integrandMyersonLog,
lower = minX,
upper = maxX,
lnK   = lnk,
s     = s)$value/maximumArea
fittingObject
}
#' Green & Myerson Value Function
#'
#' @param x observation at point n (X)
#' @param lnk fitted parameter
#' @param s fitted parameter
#'
#' @return projected, subjective value
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
#' @export
myersonHyperboloidDiscountFunc <- function(x, lnk, s)
{
func <- (1 + exp(lnk)*x)^(-s)
eval(func)
}
#' Green & Myerson Gradient Helper for Nonlinear Fitting
#'
#' @param x observation at point n (X)
#' @param lnk fitted parameter
#' @param s fitted parameter
#'
#' @return projected, subjective value
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
myersonHyperboloidDiscountGradient <- function(x, lnk, s)
{
func <- expression((1 + exp(lnk)*x)^(-s))
c(eval(stats::deriv(func, "lnk")),
eval(stats::deriv(func, "s")))
}
#' Green & Myerson Integrand helper
#'
#' This integrand helper is a projection of the integrand with delays represented as normal
#'
#' @param x observation at point n (X)
#' @param lnK fitted parameter
#' @param s fitted parameter
#'
#' @return Numerical Integration Projection
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
integrandMyerson <- function(x, lnK, s) { (1 + exp(lnK)*x)^(-s) }
#' Green & Myerson Integrand helper (log10)
#'
#' This integrand helper is a projection of the integrand with delays represented in the log base 10 scale
#'
#' @param x observation at point n (X)
#' @param lnK fitted parameter
#' @param s fitted parameter
#'
#' @return Numerical Integration Projection
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
integrandMyersonLog <- function(x, lnK, s) { (1 + exp(lnK)*(10^x))^(-s) }
#' Green & Myerson Integrand helper (log10)
#'
#' This integrand helper is a projection of the integrand with delays represented in the log base 10 scale
#'
#' @param x observation at point n (X)
#' @param lnK fitted parameter
#' @param s fitted parameter
#'
#' @return Numerical Integration Projection
#' @author Shawn Gilroy <sgilroy1@lsu.edu>
integrandMyersonLog <- function(x, lnK, s) { (1 + exp(lnK)*(10^x))^(-s) }
View(dd_start_greenmyerson)
#Mandar llamar paquetes para analisis de datos
pcks = c("psych","nlmrt","plyr")
#PASO 2:
#Instalar paquetes. Observaras que en la consola salen lineas de texto; no corras codigo
#hasta que aparezca la leyenda "The downloaded binary packages are in..."
install.packages(pcks)
#PASO 3:
#Correr sapply SIEMPRE al abrir una sesion de R
sapply(pcks, library, character.only=T)
#PASO 3:
#Correr sapply SIEMPRE al abrir una sesion de R
sapply(pcks, library, character.only=T)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(5, 10, 20, 40, 80)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(0.906, 0.656, 0.528, 0.343, 0.35) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,1), xlim = c(0,80), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 1/(1+k*Ime)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 1/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
#Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(0.906, 0.656, 0.528, 0.343, 0.35) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,1), xlim = c(0,80), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 1/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(90, 77.5, 95, 92.5, 95, 80, 82.5, 85, 52.5, 70, 17.5, 7.5, 10) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 1/(1+k*Eme)^s #Modelo
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#Mandar llamar paquetes para analisis de datos
pcks = c("psych","nlmrt","plyr")
#PASO 2:
#Instalar paquetes. Observaras que en la consola salen lineas de texto; no corras codigo
#hasta que aparezca la leyenda "The downloaded binary packages are in..."
install.packages(pcks)
install.packages(pcks)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(90, 77.5, 95, 92.5, 95, 80, 82.5, 85, 52.5, 70, 17.5, 7.5, 10) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#PASO 3:
#Correr sapply SIEMPRE al abrir una sesion de R
sapply(pcks, library, character.only=T)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df, lower = c(k=0, s=0)) #PASO 14:
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(61.36, 50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0, 0) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
#Eme <- c(1, 3, 6, 9, 12)
#PASO 5:
#Poner los puntos de indiferencia (IP) en la nueva variable, que seria para el eje Y
money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#mas impulsivo de todos (10) money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
money_indiff <- c(97.5, 100, 100, 92.5, 82.5, 92.5, 80, 95, 37.5, 75, 30, 37.5, 45) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*Eme)^s #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*(Eme^s)) #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#mas impulsivo de todos (10) money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
money_indiff <- c(75, 75, 50, 17.5, 7.5, 2.5, 2.5, 5, 2,5, 0, 0, 5, 2.5) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#mas impulsivo de todos (10) money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
money_indiff <- c(75, 75, 50, 17.5, 7.5, 2.5, 2.5, 5, 2,5, 0, 0, 5, 2.5) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#mas impulsivo de todos (10) money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
money_indiff <- c(75, 75, 50, 17.5, 7.5, 2.5, 2.5, 5, 2.5, 0, 0, 5, 2.5) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*(Eme^s)) #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#PASO 4:
#Crear variable del eje X, para este caso seria *Eme*
#Si decides cambiar el nombre de la variable aqui, tendras que hacerlo en todo el codigo que
#diga Eme, de lo contrario marcara error
Eme <- c(1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36)
#mas impulsivo de todos (10) money_indiff <- c(50, 27.50, 17.50, 5, 2.5, 2.5, 0, 0, 0, 0, 0, 0,0) #Copiar los IP de Excel y ponerlos en esta linea
money_indiff <- c(77.5, 86.67, 70, 22.5, 22.5, 22.5, 5, 0, 0, 2.5, 0, 0, 2.5) #Copiar los IP de Excel y ponerlos en esta linea
#PASO 6:
#Correr el data.frame
money_df <- data.frame(Eme, money_indiff)
#PASO 7:
#Correr funcion para verificar que el data.frame se esta graficando bien (funcion de descuento).
#Esperar a que termine y observar grafico en la zona derecha inferior.
plot(money_df, xlab = "Demoras (días)", ylab = "Valor SubjeEvo", pch = 16,
col = 'black', ylim = c(0,100), xlim = c(0,40), main = 'Descuento Temporal', las = 1)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*(Eme^s)) #Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
#MG_mod <- money_indiff ~ 100/(1+k*(Eme^s))
MG_mod <- money_indiff ~ 100/((1+k*Eme)^s)#Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
#A conInuacion veras la ecuacion del modelo hiperboloide
#Corre las tres lineas siguientes
MG_mod <- money_indiff ~ 100/(1+k*(Eme^s))
#MG_mod <- money_indiff ~ 100/((1+k*Eme)^s)#Modelo
start_values <- c(k = 0, s = 1) #Valores iniciales de los parametros
MG_fit <- wrapnls(MG_mod, start = start_values, data = money_df) #PASO 14:
#Imprimir los valores de k, s, suma residual de los cuadrados
print(MG_fit)
cite(nlmrt)
library(nlmrt)
cite(nlmrt)
citation(nlmrt)
citation(package = nlmrt)
citation(package = "nlmrt")
#activamos las librerías y especificamos nuestro directorio.
library(brms)
library(readxl)
rm(list=ls())
setwd("~/Library/CloudStorage/OneDrive-UNED/Curso LMMs Doctorado UNED/Sesión 4")
data <- read_excel("Data_interaccion.xlsx")
mod415 <- brm(formula = Licks15 ~ Phase*Group + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
plot(mod415)
rm(list=ls())
#activamos las librerías y especificamos nuestro directorio.
library(brms)
library(readxl)
setwd("~/Library/CloudStorage/OneDrive-UNED/Curso LMMs Doctorado UNED/Sesión 4")
data <- read_excel("Data_interaccion.xlsx")
data <- read_excel("Data_interaccion.xlsx")
mod015 <- brm(formula = Licks15 ~ (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod115 <- brm(formula = Licks15 ~ Phase + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod215 <- brm(formula = Licks15 ~ Group + (1|Subjects),  #A = EXP, B = CONT
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod215 <- brm(formula = Licks15 ~ Group + (1|Subjects),  #A = EXP, B = CONT
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod315 <- brm(formula = Licks15 ~ Phase + Group + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod415 <- brm(formula = Licks15 ~ Phase*Group + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
bayes_factor(mod015,mod115)
bayes_factor(mod115,mod015)
bayes_factor(mod215,mod115)
bayes_factor(mod315,mod215)
bayes_factor(mod415,mod315)
post_samples_mod415 = posterior_samples(mod415)
plot(mod415)
plot(mod415)
ppmod415<-pp_check(mod415,nsamples = 1000)
post_samples_mod415
post_samples_mod415
#Aquí vamos a verificar qué tanto se parecen las muestras al modelo.
ppmod415<-pp_check(mod415,nsamples = 1000)
ppmod415
mean(post_samples_mod415$b_PhaseD<0)
mean(post_samples_mod415$b_GroupB>0)
mean(post_samples_mod415$"b_PhaseD:GroupB">0)
rm(list=ls())
#activamos las librerías y especificamos nuestro directorio.
library(brms)
library(readxl)
data <- read_excel("Data_interaccion.xlsx")
setwd("/Users/gabrielaeugenia/Documents/GITHUB/TallerMLM_UNED/MLM 2 VI")
data <- read_excel("Data_interaccion.xlsx")
mod015 <- brm(formula = Licks15 ~ (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = TRUE)
mod115 <- brm(formula = Licks15 ~ Phase + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod215 <- brm(formula = Licks15 ~ Group + (1|Subjects),  #A = EXP, B = CONT
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod315 <- brm(formula = Licks15 ~ Phase + Group + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
mod415 <- brm(formula = Licks15 ~ Phase*Group + (1|Subjects),
data = data, chains = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta=0.99, max_treedepth = 12),
seed = 1702, save_all_pars = T)
bayes_factor(mod115,mod015)
bayes_factor(mod215,mod115)
bayes_factor(mod315,mod215)
bayes_factor(mod415,mod315)
#Al final se compara con el modelo nulo, para poner ese resultado.
bayes_factor(mod415,mod015)
plot(mod415)
post_samples_mod415 = posterior_samples(mod415)
#Si llamamos a la variable, podemos ver los resultados.
post_samples_mod415
ppmod415<-pp_check(mod415,nsamples = 1000)
ppmod415
#Aquí vamos a verificar qué porcentaje de nuestras muestras son mayores o
#menores a cero (en función de la dirección de la pendiente), para hablar de
#qué tanta evidencia hay de que esa pendiente es positiva o negativa.
#Llamamos al modelo para ver nuestras pendientes.
mod415
mean(post_samples_mod415$b_PhaseD<0)
mean(post_samples_mod415$b_GroupB>0)
#En la interacción se tiene que poner como texto (entre comillas) porque si no,
#R se vuelve un poco loco con los ":".
mean(post_samples_mod415$"b_PhaseD:GroupB">0)
#Al final se compara con el modelo nulo, para poner ese resultado.
bayes_factor(mod415,mod015)
mean(post_samples_mod460$b_GroupB<0)
mean(post_samples_mod415$b_GroupB>0)
bayes_factor(mod015,mod415)
